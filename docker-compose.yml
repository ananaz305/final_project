version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'echo srvr | nc localhost 2181 | grep Mode']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      zookeeper: # Running Kafka after Zookeeper
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'kafka-topics --bootstrap-server kafka:29092 --list']
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 15s

  postgres_db:
    image: postgres:15
    container_name: postgres_db
    ports:
      - "5432:5432"
    env_file:
      - ./postgres.env # POSTGRES_USER, POSTGRES_PASSWORD and POSTGRES_DB env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  reg-login-service:
    build:
      context: .
      dockerfile: ./reg-login-service/Dockerfile
    env_file:
      - ./reg-login-service/.env
    ports:
      - "8001:80"
    volumes:
      - ./reg-login-service/app:/app/app
    depends_on:
      postgres_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network

  nhs-service:
    build:
      context: .
      dockerfile: ./nhs-service/Dockerfile
    env_file:
      - ./nhs-service/.env
    ports:
      - "8002:80"
    volumes:
      - ./nhs-service/app:/app/app
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  hmrc-service:
    build:
      context: .
      dockerfile: ./hmrc-service/Dockerfile
    env_file:
      - ./hmrc-service/.env
    ports:
      - "8003:80"
    volumes:
      - ./hmrc-service/app:/app/app
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    env_file:
      - ./api-gateway/.env
    ports:
      - "8000:80"
    volumes:
      - ./api-gateway/app:/app/app
    depends_on:
      # It may be more difficult for healthcheck's FastAPI services, so we're just waiting for the launch.
      # If they have /healthcheck endpoints, you can add condition: service_health
      # and set up healthcheck for these services too.
      reg-login-service:
        condition: service_started
      nhs-service:
        condition: service_started
      hmrc-service:
        condition: service_started
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    networks:
      - app-network

  web:
    build:
      context: web
      dockerfile: Dockerfile
    ports:
      - "8010:3000"
    depends_on:
      reg-login-service:
        condition: service_started
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: